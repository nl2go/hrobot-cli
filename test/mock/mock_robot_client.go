// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/newsletter2go/hrobot-go (interfaces: RobotClient)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/newsletter2go/hrobot-go/models"
	reflect "reflect"
)

// MockRobotClient is a mock of RobotClient interface
type MockRobotClient struct {
	ctrl     *gomock.Controller
	recorder *MockRobotClientMockRecorder
}

// MockRobotClientMockRecorder is the mock recorder for MockRobotClient
type MockRobotClientMockRecorder struct {
	mock *MockRobotClient
}

// NewMockRobotClient creates a new mock instance
func NewMockRobotClient(ctrl *gomock.Controller) *MockRobotClient {
	mock := &MockRobotClient{ctrl: ctrl}
	mock.recorder = &MockRobotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRobotClient) EXPECT() *MockRobotClientMockRecorder {
	return m.recorder
}

// BootRescueGet mocks base method
func (m *MockRobotClient) BootRescueGet(arg0 string) (*models.RescueOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootRescueGet", arg0)
	ret0, _ := ret[0].(*models.RescueOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootRescueGet indicates an expected call of BootRescueGet
func (mr *MockRobotClientMockRecorder) BootRescueGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootRescueGet", reflect.TypeOf((*MockRobotClient)(nil).BootRescueGet), arg0)
}

// BootRescueSet mocks base method
func (m *MockRobotClient) BootRescueSet(arg0 string, arg1 *models.RescueSetInput) (*models.RescueValues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootRescueSet", arg0, arg1)
	ret0, _ := ret[0].(*models.RescueValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootRescueSet indicates an expected call of BootRescueSet
func (mr *MockRobotClientMockRecorder) BootRescueSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootRescueSet", reflect.TypeOf((*MockRobotClient)(nil).BootRescueSet), arg0, arg1)
}

// GetVersion mocks base method
func (m *MockRobotClient) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockRobotClientMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockRobotClient)(nil).GetVersion))
}

// IPGetList mocks base method
func (m *MockRobotClient) IPGetList() ([]models.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPGetList")
	ret0, _ := ret[0].([]models.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IPGetList indicates an expected call of IPGetList
func (mr *MockRobotClientMockRecorder) IPGetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPGetList", reflect.TypeOf((*MockRobotClient)(nil).IPGetList))
}

// KeyGetList mocks base method
func (m *MockRobotClient) KeyGetList() ([]models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyGetList")
	ret0, _ := ret[0].([]models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyGetList indicates an expected call of KeyGetList
func (mr *MockRobotClientMockRecorder) KeyGetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyGetList", reflect.TypeOf((*MockRobotClient)(nil).KeyGetList))
}

// RDnsGet mocks base method
func (m *MockRobotClient) RDnsGet(arg0 string) (*models.Rdns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RDnsGet", arg0)
	ret0, _ := ret[0].(*models.Rdns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RDnsGet indicates an expected call of RDnsGet
func (mr *MockRobotClientMockRecorder) RDnsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RDnsGet", reflect.TypeOf((*MockRobotClient)(nil).RDnsGet), arg0)
}

// RDnsGetList mocks base method
func (m *MockRobotClient) RDnsGetList() ([]models.Rdns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RDnsGetList")
	ret0, _ := ret[0].([]models.Rdns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RDnsGetList indicates an expected call of RDnsGetList
func (mr *MockRobotClientMockRecorder) RDnsGetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RDnsGetList", reflect.TypeOf((*MockRobotClient)(nil).RDnsGetList))
}

// ResetGet mocks base method
func (m *MockRobotClient) ResetGet(arg0 string) (*models.Reset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetGet", arg0)
	ret0, _ := ret[0].(*models.Reset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetGet indicates an expected call of ResetGet
func (mr *MockRobotClientMockRecorder) ResetGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetGet", reflect.TypeOf((*MockRobotClient)(nil).ResetGet), arg0)
}

// ResetSet mocks base method
func (m *MockRobotClient) ResetSet(arg0 string, arg1 *models.ResetSetInput) (*models.ResetPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSet", arg0, arg1)
	ret0, _ := ret[0].(*models.ResetPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSet indicates an expected call of ResetSet
func (mr *MockRobotClientMockRecorder) ResetSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSet", reflect.TypeOf((*MockRobotClient)(nil).ResetSet), arg0, arg1)
}

// ServerGet mocks base method
func (m *MockRobotClient) ServerGet(arg0 string) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGet", arg0)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGet indicates an expected call of ServerGet
func (mr *MockRobotClientMockRecorder) ServerGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGet", reflect.TypeOf((*MockRobotClient)(nil).ServerGet), arg0)
}

// ServerGetList mocks base method
func (m *MockRobotClient) ServerGetList() ([]models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGetList")
	ret0, _ := ret[0].([]models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGetList indicates an expected call of ServerGetList
func (mr *MockRobotClientMockRecorder) ServerGetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGetList", reflect.TypeOf((*MockRobotClient)(nil).ServerGetList))
}

// ServerReverse mocks base method
func (m *MockRobotClient) ServerReverse(arg0 string) (*models.Cancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReverse", arg0)
	ret0, _ := ret[0].(*models.Cancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerReverse indicates an expected call of ServerReverse
func (mr *MockRobotClientMockRecorder) ServerReverse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReverse", reflect.TypeOf((*MockRobotClient)(nil).ServerReverse), arg0)
}

// ServerSetName mocks base method
func (m *MockRobotClient) ServerSetName(arg0 string, arg1 *models.ServerSetNameInput) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSetName", arg0, arg1)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerSetName indicates an expected call of ServerSetName
func (mr *MockRobotClientMockRecorder) ServerSetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSetName", reflect.TypeOf((*MockRobotClient)(nil).ServerSetName), arg0, arg1)
}

// SetBaseURL mocks base method
func (m *MockRobotClient) SetBaseURL(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", arg0)
}

// SetBaseURL indicates an expected call of SetBaseURL
func (mr *MockRobotClientMockRecorder) SetBaseURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockRobotClient)(nil).SetBaseURL), arg0)
}

// SetUserAgent mocks base method
func (m *MockRobotClient) SetUserAgent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", arg0)
}

// SetUserAgent indicates an expected call of SetUserAgent
func (mr *MockRobotClientMockRecorder) SetUserAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockRobotClient)(nil).SetUserAgent), arg0)
}
